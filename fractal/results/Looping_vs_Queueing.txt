1x initial dimension and zoom
Position: [-1.1, 0.0], Dimensions: [6240, 8192], Zoom: 2000.0, Iterations: 200

	#Blocks: Max blocks. 2496
	#Looping case:

		px_per_thread: [12  1]

		(CUDA) run took 0.0556126098633s.
		#### 	
		(CUDA) run took 0.0554801902771s.
		####
		(CUDA) run took 0.0556154251099s.

		Average: 0.05556940841676s

	#Blocks: 2*Max blocks. 4992
	#Queueing case:

		px_per_thread: [6 1]

		(CUDA) run took 0.0620695343018s.
		####
		(CUDA) run took 0.0621044158936s.
		####
		(CUDA) run took 0.062061504364s.
	
		Average: 0.0620784848531s

As a percentage of time, queueing blocks with relatively small
dimensions appears to add an overhead of approximately 11.7% or
0.00651 seconds.

#4x initial dimensions and zoom, 16x initial pixel count:
Position: [-1.1, 0.0], Dimensions: [24960, 32768], Zoom: 8000.0, Iterations: 200

	#Blocks: Max blocks. 2496
	#Looping case:

		px_per_thread: [195   1]

		(CUDA) run took 0.939199890137s.
		####
		(CUDA) run took 0.937348815918s.
		####
		(CUDA) run took 0.939151489258s.

		Average: 0.938566731771s	

	#Blocks: 2*Max blocks. 4992
	#Queueing case:

		px_per_thread: [97  1]

		(CUDA) run took 1.00251446533s.
		####
		(CUDA) run took 1.00190093994s.
		####
		(CUDA) run took 1.00256231689s.

		Average: 1.00232590738s




As a percentage of time, queueing blocks with relatively large
dimensions (much larger and the GPU runs out of memory) appears to add
an overhead of approximately 6.8% or 0.06376 seconds.

All in all, looping is faster by a small but noticeable margin. 


Les' tests:


     zoom=900
     iterations = 100

     e.g. python -O comparison.py --position -1.3 0 --blocks 4992 --threads 512 --zoom 900 --iterations 100 queue --pxperthread 351

     using useOrigChk = False in genParameters

                            px
                           per
     dimx  dimy blks thds  thd      time
    -----------------------------------------
    19968 19968 4992 1024   78  0.408787567139
    19968 19968 2496 1024  156  0.447927703857

    19968 19968 4992 1024   78  0.4087394104
    19968 19968 1248 1024  312  0.464446563721
 
    29952 29952 4992  512  351  1.17091418457
    29952 29952 2496  512  702  1.18278723145

    29952 29952 4992  512  351  1.17207836914
    29952 29952 1248  512 1404  1.19653564453

    using useOrigChk = True
    29952 29952 4992  512  351  0.762561706543
    29952 29952 2496  512  702  0.780840881348

python -O comparison.py --position -1.3 0 --dimensions 0 0 --blocks 4992 --threads 512 --zoom 900 --iterations 100 queue --pxperthread 351
Compiled and got function gen
Doing (runQueueLoopComparison) run. Position: [-1.3, 0.0], Dimensions: [0, 0], Zoom: 900.0, Iterations: 100

29952 29952 4992 (1, 4992, 1) 512 (256, 2, 1) 351 1.17115441895
29952 29952 2496 (1, 2496, 1) 512 (128, 4, 1) 702 1.18288537598

Laptop test (144 cores!!!):
python -O comparison.py --position -1.3 0 --dimensions 19968 19968  --blocks 4992 --threads 1024 --zoom 900 --iterations 100 queue --pxperthread 78
Doing (runQueueLoopComparison) run. Position: [-1.3, 0.0], Dimensions: [19968, 19968], Zoom: 900.0, Iterations: 100
# threads = 1024.000000  (19968, 19968: 4992::78)
Compiled and got function gen
19968 19968   39 (1,   39, 1)  1024 (2, 512, 1)  9984 0.98933874511
19968 19968   78 (1,   78, 1)  1024 (4, 256, 1)  4992 1.02890930176
19968 19968  156 (1,  156, 1)  1024 (8, 128, 1)  2496 1.01899761963
19968 19968  312 (1,  312, 1)  1024 (16, 64, 1)  1248 1.08474499512
19968 19968  624 (1,  624, 1)  1024 (32, 32, 1)   624 1.13727148438
19968 19968 1248 (1, 1248, 1)  1024 (64, 16, 1)   312 1.14211547852
19968 19968 2496 (1, 2496, 1)  1024 (128, 8, 1)   156 0.94758001709
19968 19968 3744 (3, 1248, 1) 1024 (64, 16, 1)    104 0.884243286133
19968 19968 4056 (13, 312, 1)  1024 (16, 64, 1)    96 0.883018920898
19968 19968 4992 (1, 4992, 1)  1024 (256, 4, 1)    78 0.81325488281
19968 19968 5408 (13, 416, 1) 1024 (64, 16, 1)     72 0.466790344238
19968 19968 6084 (39, 156, 1) 1024 (8, 128, 1)     64 0.902012634277
19968 19968 7488 (3, 2496, 1) 1024 (128, 8, 1)     52 0.643620239258
19968 19968 8112 (13, 624, 1) 1024 (32, 32, 1)     48 0.675038696289
19968 19968 9984 (1, 9984, 1)  1024 (512, 2, 1)    39 0.68547943115
19968 19968 10816 (13, 832, 1) 1024 (128, 8, 1)    36 0.44087399292
19968 19968 12168 (39, 312, 1) 1024 (16, 64, 1)    32 0.510387207031
19968 19968 24336 (39, 624, 1) 1024 (32, 32, 1)    16 0.496596954346
19968 19968 48672 (39, 1248, 1) 1024 (64, 16, 1)    8 0.507675140381
19968 19968 97344 (39, 2496, 1) 1024 (128, 8, 1)    4 0.507869445801
19968 19968 194688 (39, 4992, 1) 1024 (256, 4, 1)   2 0.539436889648
19968 19968 389376 (39, 9984, 1) 1024 (512, 2, 1)   1 0.609549377441


python -O comparison.py --position -1.3 0 --dimensions 19968 19968  --threads 1024 --zoom 900 --iterations 100 queue --pxperthread 52
Doing (runQueueLoopComparison) run. Position: [-1.3, 0.0], Dimensions: [19968, 19968], Zoom: 900.0, Iterations: 100
Compiled and got function gen
 19968, 19968:   389376 ( (39, 9984, 1))  1024 ( (512, 2, 1))     1   0.609576
 19968, 19968:   194688 ( (39, 4992, 1))  1024 ( (256, 4, 1))     2   0.539430
 19968, 19968:   129792 ( (13, 9984, 1))  1024 ( (512, 2, 1))     3   0.524627
 19968, 19968:    97344 ( (39, 2496, 1))  1024 ( (128, 8, 1))     4   0.507913
 19968, 19968:    64896 ( (13, 4992, 1))  1024 ( (256, 4, 1))     6   0.510483
 19968, 19968:    48672 ( (39, 1248, 1))  1024 ( (64, 16, 1))     8   0.507732
 19968, 19968:    43264 ( (13, 3328, 1))  1024 ( (512, 2, 1))     9   0.443304
 19968, 19968:    32448 ( (13, 2496, 1))  1024 ( (128, 8, 1))    12   0.504059
 19968, 19968:    29952 (  (3, 9984, 1))  1024 ( (512, 2, 1))    13   0.542853
 19968, 19968:    24336 (  (39, 624, 1))  1024 ( (32, 32, 1))    16   0.496620
 19968, 19968:    21632 ( (13, 1664, 1))  1024 ( (256, 4, 1))    18   0.438248
 19968, 19968:    16224 ( (13, 1248, 1))  1024 ( (64, 16, 1))    24   0.523492
 19968, 19968:    14976 (  (3, 4992, 1))  1024 ( (256, 4, 1))    26   0.541497
 19968, 19968:    12168 (  (39, 312, 1))  1024 ( (16, 64, 1))    32   0.510362
 19968, 19968:    10816 (  (13, 832, 1))  1024 ( (128, 8, 1))    36   0.440502
 19968, 19968:     9984 (  (1, 9984, 1))  1024 ( (512, 2, 1))    39   0.685212
 19968, 19968:     8112 (  (13, 624, 1))  1024 ( (32, 32, 1))    48   0.674693
 19968, 19968:     7488 (  (3, 2496, 1))  1024 ( (128, 8, 1))    52   0.643983
 19968, 19968:     6084 (  (39, 156, 1))  1024 ( (8, 128, 1))    64   0.902625
 19968, 19968:     5408 (  (13, 416, 1))  1024 ( (64, 16, 1))    72   0.466783
 19968, 19968:     4992 (  (1, 4992, 1))  1024 ( (256, 4, 1))    78   0.800220
 19968, 19968:     4056 (  (13, 312, 1))  1024 ( (16, 64, 1))    96   0.882672
 19968, 19968:     3744 (  (3, 1248, 1))  1024 ( (64, 16, 1))   104   0.882151
 19968, 19968:     3328 (  (1, 3328, 1))  1024 ( (512, 2, 1))   117   0.666908
 19968, 19968:     3042 (   (39, 78, 1))  1024 ( (4, 256, 1))   128   1.020780
 19968, 19968:     2704 (  (13, 208, 1))  1024 ( (32, 32, 1))   144   0.679243
 19968, 19968:     2496 (  (1, 2496, 1))  1024 ( (128, 8, 1))   156   0.948459
 19968, 19968:     2304 (   (3, 768, 1))  1024 ( (512, 2, 1))   169   0.456908
 19968, 19968:     2028 (  (13, 156, 1))  1024 ( (8, 128, 1))   192   0.919476
 19968, 19968:     1872 (   (3, 624, 1))  1024 ( (32, 32, 1))   208   0.946076
 19968, 19968:     1664 (  (1, 1664, 1))  1024 ( (256, 4, 1))   234   0.937539
 19968, 19968:     1521 (   (39, 39, 1))  1024 ( (2, 512, 1))   256   1.052783
 19968, 19968:     1352 (  (13, 104, 1))  1024 ( (16, 64, 1))   288   0.892699
 19968, 19968:     1248 (  (1, 1248, 1))  1024 ( (64, 16, 1))   312   1.141578
 19968, 19968:     1152 (   (3, 384, 1))  1024 ( (256, 4, 1))   338   0.467342
 19968, 19968:     1014 (   (13, 78, 1))  1024 ( (4, 256, 1))   384   0.960532
 19968, 19968:      936 (   (3, 312, 1))  1024 ( (16, 64, 1))   416   0.994874
 19968, 19968:      832 (   (1, 832, 1))  1024 ( (128, 8, 1))   468   1.006387
 19968, 19968:      768 (   (1, 768, 1))  1024 ( (512, 2, 1))   507   0.720061
 19968, 19968:      676 (   (13, 52, 1))  1024 ( (8, 128, 1))   576   0.937531
 19968, 19968:      624 (   (1, 624, 1))  1024 ( (32, 32, 1))   624   1.136599
 19968, 19968:      576 (   (3, 192, 1))  1024 ( (128, 8, 1))   676   0.744121
 19968, 19968:      507 (   (13, 39, 1))  1024 ( (2, 512, 1))   768   0.995941
 19968, 19968:      468 (   (3, 156, 1))  1024 ( (8, 128, 1))   832   0.980240
 19968, 19968:      416 (   (1, 416, 1))  1024 ( (64, 16, 1))   936   1.158082
 19968, 19968:      384 (   (1, 384, 1))  1024 ( (256, 4, 1))  1014   0.994802
 19968, 19968:      338 (   (13, 26, 1))  1024 ( (4, 256, 1))  1152   1.051827
 19968, 19968:      312 (   (1, 312, 1))  1024 ( (16, 64, 1))  1248   1.083141
 19968, 19968:      288 (    (3, 96, 1))  1024 ( (64, 16, 1))  1352   0.940866
 19968, 19968:      256 (   (1, 256, 1))  1024 ( (512, 2, 1))  1521   0.735546
 19968, 19968:      234 (    (3, 78, 1))  1024 ( (4, 256, 1))  1664   0.996457
 19968, 19968:      208 (   (1, 208, 1))  1024 ( (32, 32, 1))  1872   1.139078
 19968, 19968:      192 (   (1, 192, 1))  1024 ( (128, 8, 1))  2028   1.030136
 19968, 19968:      169 (   (13, 13, 1))  1024 ( (2, 512, 1))  2304   1.031351
 19968, 19968:      156 (   (1, 156, 1))  1024 ( (8, 128, 1))  2496   1.031329
 19968, 19968:      144 (    (3, 48, 1))  1024 ( (32, 32, 1))  2704   0.933665
 19968, 19968:      128 (   (1, 128, 1))  1024 ( (256, 4, 1))  3042   1.004358
 19968, 19968:      117 (    (3, 39, 1))  1024 ( (2, 512, 1))  3328   0.979734
 19968, 19968:      104 (   (1, 104, 1))  1024 ( (16, 64, 1))  3744   1.091777
 19968, 19968:       96 (    (1, 96, 1))  1024 ( (64, 16, 1))  4056   1.149796
 19968, 19968:       78 (    (1, 78, 1))  1024 ( (4, 256, 1))  4992   1.043309
 19968, 19968:       72 (    (3, 24, 1))  1024 ( (16, 64, 1))  5408   0.926932
 19968, 19968:       64 (    (1, 64, 1))  1024 ( (128, 8, 1))  6084   1.056448
 19968, 19968:       52 (    (1, 52, 1))  1024 ( (8, 128, 1))  7488   1.049380
 19968, 19968:       48 (    (1, 48, 1))  1024 ( (32, 32, 1))  8112   1.135833
 19968, 19968:       39 (    (1, 39, 1))  1024 ( (2, 512, 1))  9984   0.982423
 19968, 19968:       36 (    (3, 12, 1))  1024 ( (8, 128, 1)) 10816   0.891538
 19968, 19968:       32 (    (1, 32, 1))  1024 ( (64, 16, 1)) 12168   1.171597
 19968, 19968:       26 (    (1, 26, 1))  1024 ( (4, 256, 1)) 14976   1.082945
 19968, 19968:       24 (    (1, 24, 1))  1024 ( (16, 64, 1)) 16224   0.979186


K20c
python -O comparison.py --position -1.3 0 --dimensions 32768 32768  --threads 1024 --zoom 900 --iterations 100 queue 
Doing (runQueueLoopComparison) run. Position: [-1.3, 0.0], Dimensions: [32768, 32768], Zoom: 900.0, Iterations: 100
Compiled and got function gen
 32768, 32768:  1048576 ((32, 32768, 1))  1024 ((1024, 1, 1))     1   0.378296
 32768, 32768:   524288 ((16, 32768, 1))  1024 ((1024, 1, 1))     2   0.326148
 32768, 32768:   262144 ( (8, 32768, 1))  1024 ((1024, 1, 1))     4   0.319581
 32768, 32768:   131072 ( (4, 32768, 1))  1024 ((1024, 1, 1))     8   0.342930
 32768, 32768:    65536 ( (2, 32768, 1))  1024 ((1024, 1, 1))    16   0.364374
 32768, 32768:    32768 ( (1, 32768, 1))  1024 ((1024, 1, 1))    32   0.776072
 32768, 32768:    16384 ( (1, 16384, 1))  1024 ( (512, 2, 1))    64   1.006741
 32768, 32768:     8192 (  (1, 8192, 1))  1024 ( (256, 4, 1))   128   1.159568
 32768, 32768:     4096 (  (1, 4096, 1))  1024 ( (128, 8, 1))   256   1.214168
 32768, 32768:     2048 (  (1, 2048, 1))  1024 ( (64, 16, 1))   512   1.241505
 32768, 32768:     1024 (  (1, 1024, 1))  1024 ( (32, 32, 1))  1024   1.245153
 32768, 32768:      512 (   (1, 512, 1))  1024 ( (16, 64, 1))  2048   1.236912
 32768, 32768:      256 (   (1, 256, 1))  1024 ( (8, 128, 1))  4096   1.270301
 32768, 32768:      128 (   (1, 128, 1))  1024 ( (4, 256, 1))  8192   1.279309
 32768, 32768:       64 (    (1, 64, 1))  1024 ( (2, 512, 1)) 16384   1.294331
